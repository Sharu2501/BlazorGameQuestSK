// <auto-generated />
using System;
using BlazorGameAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlazorGameAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251024103417_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DungeonGameHistory", b =>
                {
                    b.Property<int>("CompletedDungeonsIdDungeon")
                        .HasColumnType("integer");

                    b.Property<int>("GameHistoryId")
                        .HasColumnType("integer");

                    b.HasKey("CompletedDungeonsIdDungeon", "GameHistoryId");

                    b.HasIndex("GameHistoryId");

                    b.ToTable("GameHistoryDungeons", (string)null);
                });

            modelBuilder.Entity("SharedModels.Model.Artifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Rarity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Artifacts");
                });

            modelBuilder.Entity("SharedModels.Model.Dungeon", b =>
                {
                    b.Property<int>("IdDungeon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDungeon"));

                    b.Property<int?>("ArtifactId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsExplored")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IdDungeon");

                    b.HasIndex("ArtifactId")
                        .IsUnique();

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("SharedModels.Model.GameHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatePlayed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("GameHistories");
                });

            modelBuilder.Entity("SharedModels.Model.GameSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SessionId"));

                    b.Property<int>("CurrentDungeonId")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentRoomId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("SessionId");

                    b.HasIndex("IsActive");

                    b.HasIndex("PlayerId");

                    b.ToTable("GameSessions");
                });

            modelBuilder.Entity("SharedModels.Model.HighScore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAchieved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("HighScores");
                });

            modelBuilder.Entity("SharedModels.Model.Monster", b =>
                {
                    b.Property<int>("IdMonster")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMonster"));

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("IdMonster");

                    b.ToTable("Monsters");
                });

            modelBuilder.Entity("SharedModels.Model.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("DungeonId")
                        .HasColumnType("integer");

                    b.Property<int>("ExperienceGained")
                        .HasColumnType("integer");

                    b.Property<int>("GoldGained")
                        .HasColumnType("integer");

                    b.Property<bool>("IsExplored")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("DungeonId");

                    b.HasIndex("MonsterId")
                        .IsUnique();

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("SharedModels.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserType")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username");

                    b.ToTable("Users");

                    b.HasDiscriminator<int>("UserType").HasValue(2);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SharedModels.Model.Admin", b =>
                {
                    b.HasBaseType("SharedModels.Model.User");

                    b.Property<int>("AdminId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("SharedModels.Model.Player", b =>
                {
                    b.HasBaseType("SharedModels.Model.User");

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<int>("Attack")
                        .HasColumnType("integer");

                    b.Property<int>("Defense")
                        .HasColumnType("integer");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("integer");

                    b.Property<int>("Gold")
                        .HasColumnType("integer");

                    b.Property<int>("Health")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("LevelCap")
                        .HasColumnType("integer");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("DungeonGameHistory", b =>
                {
                    b.HasOne("SharedModels.Model.Dungeon", null)
                        .WithMany()
                        .HasForeignKey("CompletedDungeonsIdDungeon")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SharedModels.Model.GameHistory", null)
                        .WithMany()
                        .HasForeignKey("GameHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SharedModels.Model.Artifact", b =>
                {
                    b.HasOne("SharedModels.Model.Player", null)
                        .WithMany("Inventory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SharedModels.Model.Dungeon", b =>
                {
                    b.HasOne("SharedModels.Model.Artifact", "Artifact")
                        .WithOne()
                        .HasForeignKey("SharedModels.Model.Dungeon", "ArtifactId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Artifact");
                });

            modelBuilder.Entity("SharedModels.Model.GameHistory", b =>
                {
                    b.HasOne("SharedModels.Model.Player", "Player")
                        .WithOne()
                        .HasForeignKey("SharedModels.Model.GameHistory", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SharedModels.Model.HighScore", b =>
                {
                    b.HasOne("SharedModels.Model.Player", null)
                        .WithOne("HighScore")
                        .HasForeignKey("SharedModels.Model.HighScore", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SharedModels.Model.Room", b =>
                {
                    b.HasOne("SharedModels.Model.Dungeon", null)
                        .WithMany("Rooms")
                        .HasForeignKey("DungeonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SharedModels.Model.Monster", "Monster")
                        .WithOne()
                        .HasForeignKey("SharedModels.Model.Room", "MonsterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("SharedModels.Model.Dungeon", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("SharedModels.Model.Player", b =>
                {
                    b.Navigation("HighScore")
                        .IsRequired();

                    b.Navigation("Inventory");
                });
#pragma warning restore 612, 618
        }
    }
}
